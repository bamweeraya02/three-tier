#include "ns3/mobility-module.h"
#include "ns3/nstime.h"
#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/internet-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/applications-module.h"
#include "ns3/ipv4-global-routing-helper.h"
#include "ns3/netanim-module.h"
#include "ns3/flow-monitor.h"
#include "ns3/flow-monitor-helper.h"
#include "ns3/flow-monitor-module.h"

#define TCP_SINK_PORT 9000
#define UDP_SINK_PORT 9001

// Experimental parameters
#define MAX_BULK_BYTES 100000
#define DDOS_RATE "1Mb/s"
#define MAX_SIMULATION_TIME 1

// Number of Bots for DDoS
#define NUMBER_OF_BOTS 100
#define NUMBER_OF_EXTRA_NODES 4  // จำนวนโหนด user ใหม่

using namespace ns3;

NS_LOG_COMPONENT_DEFINE("DDoSAttack");

int main(int argc, char *argv[])
{
    CommandLine cmd;
    cmd.Parse(argc, argv);

    Time::SetResolution(Time::NS);
    LogComponentEnable("UdpEchoClientApplication", LOG_LEVEL_INFO);
    LogComponentEnable("UdpEchoServerApplication", LOG_LEVEL_INFO);

    // Legitimate connection nodes (4 nodes)
    NodeContainer coreNodes, aggregationNodes, accessNodes;
    coreNodes.Create(2);  // Core layer
    aggregationNodes.Create(2);  // Aggregation layer
    accessNodes.Create(4);  // Access layer for legitimate nodes

    // Nodes for attack bots
    NodeContainer botNodes;
    botNodes.Create(NUMBER_OF_BOTS);

    // Nodes for extra users
    NodeContainer extraNodes;
    extraNodes.Create(NUMBER_OF_EXTRA_NODES);  // สร้างโหนด user ใหม่ 4 โหนด

    // Define the Point-To-Point Links and their Parameters
    PointToPointHelper coreLink, aggLink, accessLink;
    coreLink.SetDeviceAttribute("DataRate", StringValue("1Gbps"));
    coreLink.SetChannelAttribute("Delay", StringValue("1ms"));

    aggLink.SetDeviceAttribute("DataRate", StringValue("100Mbps"));
    aggLink.SetChannelAttribute("Delay", StringValue("1ms"));

    accessLink.SetDeviceAttribute("DataRate", StringValue("10Mbps"));
    accessLink.SetChannelAttribute("Delay", StringValue("1ms"));

    // Install the Point-To-Point Connections
    NetDeviceContainer coreDevices, aggDevices1, aggDevices2, accessDevices[4], botDevices[NUMBER_OF_BOTS], extraDevices[NUMBER_OF_EXTRA_NODES];

    // Core to Aggregation links
    coreDevices = coreLink.Install(coreNodes.Get(0), coreNodes.Get(1));
    
    aggDevices1 = aggLink.Install(coreNodes.Get(0), aggregationNodes.Get(0));
    aggDevices2 = aggLink.Install(coreNodes.Get(1), aggregationNodes.Get(1));

    // Access Layer - Connect access nodes to aggregation nodes
    for (int i = 0; i < 2; i++) {
        accessDevices[i] = accessLink.Install(aggregationNodes.Get(0), accessNodes.Get(i));
        accessDevices[i + 2] = accessLink.Install(aggregationNodes.Get(1), accessNodes.Get(i + 2));
    }

    // Bots connect to the first aggregation node
    for (int i = 0; i < NUMBER_OF_BOTS; ++i)
    {
        botDevices[i] = aggLink.Install(aggregationNodes.Get(0), botNodes.Get(i));
    }

    // Extra nodes connect to the second aggregation node
    for (int i = 0; i < NUMBER_OF_EXTRA_NODES; ++i)
    {
        extraDevices[i] = aggLink.Install(aggregationNodes.Get(1), extraNodes.Get(i));
    }

    // Enable packet capture for Wireshark
    coreLink.EnablePcapAll("core_traffic/core");
    aggLink.EnablePcapAll("agg_traffic/agg");
    accessLink.EnablePcapAll("access_traffic/access");

    // Install internet stack
    InternetStackHelper stack;
    stack.Install(coreNodes);
    stack.Install(aggregationNodes);
    stack.Install(accessNodes);
    stack.Install(botNodes);
    stack.Install(extraNodes);

    // Assign IP addresses
    Ipv4AddressHelper ipv4;
    Ipv4InterfaceContainer coreInterfaces, aggInterfaces[2], accessInterfaces[4], botInterfaces[NUMBER_OF_BOTS], extraInterfaces[NUMBER_OF_EXTRA_NODES];

    ipv4.SetBase("10.1.0.0", "255.255.255.252");
    coreInterfaces = ipv4.Assign(coreDevices);

    ipv4.SetBase("10.1.1.0", "255.255.255.252");
    aggInterfaces[0] = ipv4.Assign(aggDevices1);
    ipv4.SetBase("10.1.2.0", "255.255.255.252");
    aggInterfaces[1] = ipv4.Assign(aggDevices2);

    for (int i = 0; i < 4; ++i) {
        ipv4.SetBase("10.1.3.0", "255.255.255.0");
        accessInterfaces[i] = ipv4.Assign(accessDevices[i]);
    }

    for (int i = 0; i < NUMBER_OF_BOTS; ++i) {
        ipv4.SetBase("10.2.0.0", "255.255.255.252");
        botInterfaces[i] = ipv4.Assign(botDevices[i]);
    }

    for (int i = 0; i < NUMBER_OF_EXTRA_NODES; ++i) {
        ipv4.SetBase("10.3.0.0", "255.255.255.252");
        extraInterfaces[i] = ipv4.Assign(extraDevices[i]);
    }

    Ipv4GlobalRoutingHelper::PopulateRoutingTables();

    // DDoS Application Behavior
    OnOffHelper onoff("ns3::UdpSocketFactory", Address(InetSocketAddress(accessInterfaces[3].GetAddress(0), UDP_SINK_PORT)));
    onoff.SetConstantRate(DataRate(DDOS_RATE));
    onoff.SetAttribute("OnTime", StringValue("ns3::ConstantRandomVariable[Constant=30]"));
    onoff.SetAttribute("OffTime", StringValue("ns3::ConstantRandomVariable[Constant=0]"));

    ApplicationContainer onOffApp[NUMBER_OF_BOTS];
    for (int i = 0; i < NUMBER_OF_BOTS; ++i) {
        onOffApp[i] = onoff.Install(botNodes.Get(i));
        onOffApp[i].Start(Seconds(0.0));
        onOffApp[i].Stop(Seconds(MAX_SIMULATION_TIME));
    }

    // Legitimate TCP traffic application (BulkSend) on access nodes
    BulkSendHelper bulkSend("ns3::TcpSocketFactory", InetSocketAddress(accessInterfaces[3].GetAddress(0), TCP_SINK_PORT));
    bulkSend.SetAttribute("MaxBytes", UintegerValue(MAX_BULK_BYTES));
    ApplicationContainer bulkSendApp = bulkSend.Install(accessNodes.Get(0));
    bulkSendApp.Start(Seconds(0.0));
    bulkSendApp.Stop(Seconds(MAX_SIMULATION_TIME));

    // BulkSend on extra nodes
    for (int i = 0; i < NUMBER_OF_EXTRA_NODES; ++i) {
        ApplicationContainer extraBulkSendApp = bulkSend.Install(extraNodes.Get(i));
        extraBulkSendApp.Start(Seconds(0.0));
        extraBulkSendApp.Stop(Seconds(MAX_SIMULATION_TIME));
    }

    // UDPSink on the receiver side
    PacketSinkHelper UDPsink("ns3::UdpSocketFactory", Address(InetSocketAddress(Ipv4Address::GetAny(), UDP_SINK_PORT)));
    ApplicationContainer UDPSinkApp = UDPsink.Install(accessNodes.Get(3));
    UDPSinkApp.Start(Seconds(0.0));
    UDPSinkApp.Stop(Seconds(MAX_SIMULATION_TIME));

    // TCP Sink Application on the server side
    PacketSinkHelper TCPsink("ns3::TcpSocketFactory", InetSocketAddress(Ipv4Address::GetAny(), TCP_SINK_PORT));
    ApplicationContainer TCPSinkApp = TCPsink.Install(accessNodes.Get(3));
    TCPSinkApp.Start(Seconds(0.0));
    TCPSinkApp.Stop(Seconds(MAX_SIMULATION_TIME));

    // Simulation NetAnim configuration and node placement
    MobilityHelper mobility;

    mobility.SetPositionAllocator("ns3::GridPositionAllocator",
                                  "MinX", DoubleValue(0.0), "MinY", DoubleValue(0.0),
                                  "DeltaX", DoubleValue(5.0), "DeltaY", DoubleValue(10.0),
                                  "GridWidth", UintegerValue(5), "LayoutType", StringValue("RowFirst"));

    mobility.SetMobilityModel("ns3::ConstantPositionMobilityModel");
    mobility.Install(coreNodes);
    mobility.Install(aggregationNodes);
    mobility.Install(accessNodes);
    mobility.Install(botNodes);
    mobility.Install(extraNodes);

    AnimationInterface anim("DDoSim-three-tier.xml");

    // Flow Monitor setup
    FlowMonitorHelper flowHelper;
    Ptr<FlowMonitor> flowMonitor = flowHelper.InstallAll();

    Simulator::Stop(Seconds(MAX_SIMULATION_TIME));

    // Run the simulation
    Simulator::Run();

    // Serialize Flow Monitor data to XML file
    flowMonitor->SerializeToXmlFile("flowmonitor_three-tier.xml", true, true);

    Simulator::Destroy();
    return 0;
}
