#include "ns3/mobility-module.h"
#include "ns3/nstime.h"
#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/internet-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/applications-module.h"
#include "ns3/ipv4-global-routing-helper.h"
#include "ns3/netanim-module.h"
#include "ns3/flow-monitor.h"
#include "ns3/flow-monitor-helper.h"
#include "ns3/flow-monitor-module.h"

#define TCP_SINK_PORT 9000
#define UDP_SINK_PORT 9001

#define MAX_BULK_BYTES 100000
#define DDOS_RATE "1Mb/s"
#define MAX_SIMULATION_TIME 1

#define NUMBER_OF_BOTS 100
#define NUMBER_OF_EXTRA_NODES 4

using namespace ns3;

NS_LOG_COMPONENT_DEFINE("DDoSAttack");

void SetupPointToPointLinks(NodeContainer& nodes, NodeContainer& botNodes, NodeContainer& extraNodes)
{
    PointToPointHelper pp1, pp2, pp3, pp4;
    pp1.SetDeviceAttribute("DataRate", StringValue("10Mbps"));
    pp1.SetChannelAttribute("Delay", StringValue("1ms"));

    pp2.SetDeviceAttribute("DataRate", StringValue("100Mbps"));
    pp2.SetChannelAttribute("Delay", StringValue("1ms"));

    pp3.SetDeviceAttribute("DataRate", StringValue("10Mbps"));
    pp3.SetChannelAttribute("Delay", StringValue("1ms"));

    pp4.SetDeviceAttribute("DataRate", StringValue("10Mbps"));
    pp4.SetChannelAttribute("Delay", StringValue("1ms"));

    // Install Point-To-Point connections
    pp1.Install(nodes.Get(0), nodes.Get(1));
    pp1.Install(nodes.Get(1), nodes.Get(2));
    pp1.Install(nodes.Get(2), nodes.Get(3));

    for (int i = 0; i < NUMBER_OF_BOTS; ++i)
    {
        pp2.Install(botNodes.Get(i), nodes.Get(1));
    }

    for (int i = 0; i < NUMBER_OF_EXTRA_NODES; ++i)
    {
        pp4.Install(nodes.Get(2), extraNodes.Get(i));
    }
}

void SetupIPAddresses(NodeContainer& nodes, NodeContainer& botNodes, NodeContainer& extraNodes)
{
    InternetStackHelper stack;
    stack.Install(nodes);
    stack.Install(botNodes);
    stack.Install(extraNodes);

    Ipv4AddressHelper ipv4_n;
    ipv4_n.SetBase("10.0.0.0", "255.255.255.252");

    Ipv4AddressHelper a02, a12, a23;
    a02.SetBase("10.1.1.0", "255.255.255.0");
    a12.SetBase("10.1.2.0", "255.255.255.0");
    a23.SetBase("10.1.3.0", "255.255.255.0");

    Ipv4InterfaceContainer i02, i12, i23;
    i02 = a02.Assign(pp1.Install(nodes.Get(0), nodes.Get(1)));
    i12 = a12.Assign(pp1.Install(nodes.Get(1), nodes.Get(2)));
    i23 = a23.Assign(pp1.Install(nodes.Get(2), nodes.Get(3)));

    for (int j = 0; j < NUMBER_OF_BOTS; ++j)
    {
        ipv4_n.Assign(pp2.Install(botNodes.Get(j), nodes.Get(1)));
        ipv4_n.NewNetwork();
    }

    Ipv4AddressHelper extraAddress;
    extraAddress.SetBase("10.1.4.0", "255.255.255.0");
    extraAddress.Assign(pp4.Install(nodes.Get(2), extraNodes.Get(0)));
    extraAddress.SetBase("10.1.5.0", "255.255.255.0");
    extraAddress.Assign(pp4.Install(nodes.Get(2), extraNodes.Get(1)));
}

void SetupApplications(NodeContainer& nodes, NodeContainer& botNodes, NodeContainer& extraNodes)
{
    OnOffHelper onoff("ns3::UdpSocketFactory", Address(InetSocketAddress(Ipv4Address("10.1.3.2"), UDP_SINK_PORT)));
    onoff.SetConstantRate(DataRate(DDOS_RATE));
    onoff.SetAttribute("OnTime", StringValue("ns3::ConstantRandomVariable[Constant=30]"));
    onoff.SetAttribute("OffTime", StringValue("ns3::ConstantRandomVariable[Constant=0]"));

    for (int k = 0; k < NUMBER_OF_BOTS; ++k)
    {
        ApplicationContainer onOffApp = onoff.Install(botNodes.Get(k));
        onOffApp.Start(Seconds(0.0));
        onOffApp.Stop(Seconds(MAX_SIMULATION_TIME));
    }

    BulkSendHelper bulkSend("ns3::TcpSocketFactory", InetSocketAddress(Ipv4Address("10.1.3.2"), TCP_SINK_PORT));
    bulkSend.SetAttribute("MaxBytes", UintegerValue(MAX_BULK_BYTES));
    ApplicationContainer bulkSendApp = bulkSend.Install(nodes.Get(0));
    bulkSendApp.Start(Seconds(0.0));
    bulkSendApp.Stop(Seconds(MAX_SIMULATION_TIME));

    for (int k = 0; k < NUMBER_OF_EXTRA_NODES; ++k)
    {
        ApplicationContainer extraBulkSendApp = bulkSend.Install(extraNodes.Get(k));
        extraBulkSendApp.Start(Seconds(0.0));
        extraBulkSendApp.Stop(Seconds(MAX_SIMULATION_TIME));
    }

    PacketSinkHelper UDPsink("ns3::UdpSocketFactory", Address(InetSocketAddress(Ipv4Address::GetAny(), UDP_SINK_PORT)));
    ApplicationContainer UDPSinkApp = UDPsink.Install(nodes.Get(3));
    UDPSinkApp.Start(Seconds(0.0));
    UDPSinkApp.Stop(Seconds(MAX_SIMULATION_TIME));

    PacketSinkHelper TCPsink("ns3::TcpSocketFactory", InetSocketAddress(Ipv4Address::GetAny(), TCP_SINK_PORT));
    ApplicationContainer TCPSinkApp = TCPsink.Install(nodes.Get(3));
    TCPSinkApp.Start(Seconds(0.0));
    TCPSinkApp.Stop(Seconds(MAX_SIMULATION_TIME));
}

void SetupMobility(NodeContainer& nodes, NodeContainer& botNodes, NodeContainer& extraNodes)
{
    MobilityHelper mobility;
    mobility.SetPositionAllocator("ns3::GridPositionAllocator",
                                  "MinX", DoubleValue(0.0), "MinY", DoubleValue(0.0),
                                  "DeltaX", DoubleValue(5.0), "DeltaY", DoubleValue(10.0),
                                  "GridWidth", UintegerValue(5), "LayoutType", StringValue("RowFirst"));

    mobility.SetMobilityModel("ns3::ConstantPositionMobilityModel");
    mobility.Install(nodes);
    mobility.Install(botNodes);
    mobility.Install(extraNodes);
}

void SetupAnimation()
{
    AnimationInterface anim("DDoSim-test.xml");

    uint32_t node0Icon = anim.AddResource("ns-allinone-3.42/ns-3.42/icon/user.png");
    uint32_t node1Icon = anim.AddResource("ns-allinone-3.42/ns-3.42/icon/data_server.png");
    uint32_t node2Icon = anim.AddResource("ns-allinone-3.42/ns-3.42/icon/web_server.png");
    uint32_t botIcon = anim.AddResource("ns-allinone-3.42/ns-3.42/icon/bot.png");
    uint32_t extraNodeIcon = anim.AddResource("ns-allinone-3.42/ns-3.42/icon/user.png");

    anim.UpdateNodeImage(nodes.Get(0)->GetId(), node0Icon);
    anim.UpdateNodeImage(nodes.Get(1)->GetId(), node1Icon);
    anim.UpdateNodeImage(nodes.Get(2)->GetId(), node2Icon);
    anim.UpdateNodeImage(nodes.Get(3)->GetId(), node2Icon);

    for (int i = 0; i < NUMBER_OF_BOTS; ++i)
    {
        anim.UpdateNodeImage(botNodes.Get(i)->GetId(), botIcon);
    }

    for (int i = 0; i < NUMBER_OF_EXTRA_NODES; ++i)
    {
        anim.UpdateNodeImage(extraNodes.Get(i)->GetId(), extraNodeIcon);
    }

    anim.SetConstantPosition(nodes.Get(0), 60, 20);
    anim.SetConstantPosition(nodes.Get(1), 50, 45);
    anim.SetConstantPosition(nodes.Get(2), 80, 45);
    anim.SetConstantPosition(nodes.Get(3), 100, 45);

    for (int i = 0; i < NUMBER_OF_EXTRA_NODES; ++i)
    {
        anim.SetConstantPosition(extraNodes.Get(i), 100 + (i * 10), 60);
    }
}

int main(int argc, char *argv[])
{
    CommandLine cmd;
    cmd.Parse(argc, argv);

    Time::SetResolution(Time::NS);
    LogComponentEnable("UdpEchoClientApplication", LOG_LEVEL_INFO);
    LogComponentEnable("UdpEchoServerApplication", LOG_LEVEL_INFO);

    // Create nodes
    NodeContainer nodes, botNodes, extraNodes;
    nodes.Create(4);
    botNodes.Create(NUMBER_OF_BOTS);
    extraNodes.Create(NUMBER_OF_EXTRA_NODES);

    // Set up network topology
    SetupPointToPointLinks(nodes, botNodes, extraNodes);
    SetupIPAddresses(nodes, botNodes, extraNodes);

    // Set up applications
    SetupApplications(nodes, botNodes, extraNodes);

    // Set up mobility
    SetupMobility(nodes, botNodes, extraNodes);

    // Set up animation
    SetupAnimation();

    // Flow Monitor setup
    FlowMonitorHelper flowHelper;
    Ptr<FlowMonitor> flowMonitor = flowHelper.InstallAll();

    Simulator::Stop(Seconds(MAX_SIMULATION_TIME));
    Simulator::Run();
    flowMonitor->SerializeToXmlFile("flowmonitor_ddos.xml", true, true);
    Simulator::Destroy();

    return 0;
}
